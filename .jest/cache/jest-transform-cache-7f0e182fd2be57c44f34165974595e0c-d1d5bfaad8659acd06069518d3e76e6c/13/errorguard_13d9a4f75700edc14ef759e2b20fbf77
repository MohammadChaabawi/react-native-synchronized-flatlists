9bbc3243ec9cc63a835bf10ff723c428
"use strict";

var _inGuard = 0;

var _globalHandler = function onError(e, isFatal) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error, false);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args, unused_onError, unused_name) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },
  inGuard: function inGuard() {
    return !!_inGuard;
  },
  guard: function guard(fun, name, context) {
    var _ref;

    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    var guardName = (_ref = name !== null && name !== void 0 ? name : fun.name) !== null && _ref !== void 0 ? _ref : '<generated guard>';

    function guarded() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return ErrorUtils.applyWithGuard(fun, context !== null && context !== void 0 ? context : this, args, null, guardName);
    }

    return guarded;
  }
};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsImlzRmF0YWwiLCJFcnJvclV0aWxzIiwic2V0R2xvYmFsSGFuZGxlciIsImZ1biIsImdldEdsb2JhbEhhbmRsZXIiLCJyZXBvcnRFcnJvciIsImVycm9yIiwicmVwb3J0RmF0YWxFcnJvciIsImFwcGx5V2l0aEd1YXJkIiwiY29udGV4dCIsImFyZ3MiLCJ1bnVzZWRfb25FcnJvciIsInVudXNlZF9uYW1lIiwiYXBwbHkiLCJhcHBseVdpdGhHdWFyZElmTmVlZGVkIiwiaW5HdWFyZCIsImd1YXJkIiwibmFtZSIsImNvbnNvbGUiLCJ3YXJuIiwiZ3VhcmROYW1lIiwiZ3VhcmRlZCIsImdsb2JhbCJdLCJtYXBwaW5ncyI6Ijs7QUFXQSxJQUFJQSxRQUFRLEdBQUcsQ0FBZjs7QUFVQSxJQUFJQyxjQUE0QixHQUFHLFNBQVNDLE9BQVQsQ0FDakNDLENBRGlDLEVBRWpDQyxPQUZpQyxFQUdqQztBQUNBLFFBQU1ELENBQU47QUFDRCxDQUxEOztBQWVBLElBQU1FLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsZ0JBRGlCLDRCQUNBQyxHQURBLEVBQ3lCO0FBQ3hDTixJQUFBQSxjQUFjLEdBQUdNLEdBQWpCO0FBQ0QsR0FIZ0I7QUFJakJDLEVBQUFBLGdCQUppQiw4QkFJZ0I7QUFDL0IsV0FBT1AsY0FBUDtBQUNELEdBTmdCO0FBT2pCUSxFQUFBQSxXQVBpQix1QkFPTEMsS0FQSyxFQU9lO0FBQzlCVCxJQUFBQSxjQUFjLElBQUlBLGNBQWMsQ0FBQ1MsS0FBRCxFQUFRLEtBQVIsQ0FBaEM7QUFDRCxHQVRnQjtBQVVqQkMsRUFBQUEsZ0JBVmlCLDRCQVVBRCxLQVZBLEVBVW9CO0FBRW5DVCxJQUFBQSxjQUFjLElBQUlBLGNBQWMsQ0FBQ1MsS0FBRCxFQUFRLElBQVIsQ0FBaEM7QUFDRCxHQWJnQjtBQWNqQkUsRUFBQUEsY0FkaUIsMEJBZWZMLEdBZmUsRUFnQmZNLE9BaEJlLEVBaUJmQyxJQWpCZSxFQW1CZkMsY0FuQmUsRUFxQmZDLFdBckJlLEVBc0JSO0FBQ1AsUUFBSTtBQUNGaEIsTUFBQUEsUUFBUTtBQUtSLGFBQU9PLEdBQUcsQ0FBQ1UsS0FBSixDQUFVSixPQUFWLEVBQW1CQyxJQUFuQixDQUFQO0FBQ0QsS0FQRCxDQU9FLE9BQU9YLENBQVAsRUFBVTtBQUNWRSxNQUFBQSxVQUFVLENBQUNJLFdBQVgsQ0FBdUJOLENBQXZCO0FBQ0QsS0FURCxTQVNVO0FBQ1JILE1BQUFBLFFBQVE7QUFDVDs7QUFDRCxXQUFPLElBQVA7QUFDRCxHQXBDZ0I7QUFxQ2pCa0IsRUFBQUEsc0JBckNpQixrQ0FzQ2ZYLEdBdENlLEVBdUNmTSxPQXZDZSxFQXdDZkMsSUF4Q2UsRUF5Q1I7QUFDUCxRQUFJVCxVQUFVLENBQUNjLE9BQVgsRUFBSixFQUEwQjtBQUt4QixhQUFPWixHQUFHLENBQUNVLEtBQUosQ0FBVUosT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtBQUNELEtBTkQsTUFNTztBQUNMVCxNQUFBQSxVQUFVLENBQUNPLGNBQVgsQ0FBMEJMLEdBQTFCLEVBQStCTSxPQUEvQixFQUF3Q0MsSUFBeEM7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRCxHQXBEZ0I7QUFxRGpCSyxFQUFBQSxPQXJEaUIscUJBcURFO0FBQ2pCLFdBQU8sQ0FBQyxDQUFDbkIsUUFBVDtBQUNELEdBdkRnQjtBQXdEakJvQixFQUFBQSxLQXhEaUIsaUJBeURmYixHQXpEZSxFQTBEZmMsSUExRGUsRUEyRGZSLE9BM0RlLEVBNERPO0FBQUE7O0FBR3RCLFFBQUksT0FBT04sR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCZSxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxxREFBYixFQUFvRWhCLEdBQXBFO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsUUFBTWlCLFNBQVMsV0FBR0gsSUFBSCxhQUFHQSxJQUFILGNBQUdBLElBQUgsR0FBV2QsR0FBRyxDQUFDYyxJQUFmLHVDQUF1QixtQkFBdEM7O0FBQ0EsYUFBU0ksT0FBVCxHQUF3QztBQUFBLHdDQUFwQlgsSUFBb0I7QUFBcEJBLFFBQUFBLElBQW9CO0FBQUE7O0FBQ3RDLGFBQU9ULFVBQVUsQ0FBQ08sY0FBWCxDQUNMTCxHQURLLEVBRUxNLE9BRkssYUFFTEEsT0FGSyxjQUVMQSxPQUZLLEdBRU0sSUFGTixFQUdMQyxJQUhLLEVBSUwsSUFKSyxFQUtMVSxTQUxLLENBQVA7QUFPRDs7QUFFRCxXQUFPQyxPQUFQO0FBQ0Q7QUEvRWdCLENBQW5CO0FBa0ZBQyxNQUFNLENBQUNyQixVQUFQLEdBQW9CQSxVQUFwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKiBAcG9seWZpbGxcbiAqL1xuXG5sZXQgX2luR3VhcmQgPSAwO1xuXG50eXBlIEVycm9ySGFuZGxlciA9IChlcnJvcjogbWl4ZWQsIGlzRmF0YWw6IGJvb2xlYW4pID0+IHZvaWQ7XG50eXBlIEZuPEFyZ3MsIFJldHVybj4gPSAoLi4uQXJncykgPT4gUmV0dXJuO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGVycm9yIGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiB3ZSBlbmNvdW50ZXIgYW4gZXhjZXB0aW9uXG4gKiB3aGVuIGxvYWRpbmcgYSBtb2R1bGUuIFRoaXMgd2lsbCByZXBvcnQgYW55IGVycm9ycyBlbmNvdW50ZXJlZCBiZWZvcmVcbiAqIEV4Y2VwdGlvbnNNYW5hZ2VyIGlzIGNvbmZpZ3VyZWQuXG4gKi9cbmxldCBfZ2xvYmFsSGFuZGxlcjogRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gb25FcnJvcihcbiAgZTogbWl4ZWQsXG4gIGlzRmF0YWw6IGJvb2xlYW4sXG4pIHtcbiAgdGhyb3cgZTtcbn07XG5cbi8qKlxuICogVGhlIHBhcnRpY3VsYXIgcmVxdWlyZSBydW50aW1lIHRoYXQgd2UgYXJlIHVzaW5nIGxvb2tzIGZvciBhIGdsb2JhbFxuICogYEVycm9yVXRpbHNgIG9iamVjdCBhbmQgaWYgaXQgZXhpc3RzLCB0aGVuIGl0IHJlcXVpcmVzIG1vZHVsZXMgd2l0aCB0aGVcbiAqIGVycm9yIGhhbmRsZXIgc3BlY2lmaWVkIHZpYSBFcnJvclV0aWxzLnNldEdsb2JhbEhhbmRsZXIgYnkgY2FsbGluZyB0aGVcbiAqIHJlcXVpcmUgZnVuY3Rpb24gd2l0aCBhcHBseVdpdGhHdWFyZC4gU2luY2UgdGhlIHJlcXVpcmUgbW9kdWxlIGlzIGxvYWRlZFxuICogYmVmb3JlIGFueSBvZiB0aGUgbW9kdWxlcywgdGhpcyBFcnJvclV0aWxzIG11c3QgYmUgZGVmaW5lZCAoYW5kIHRoZSBoYW5kbGVyXG4gKiBzZXQpIGdsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgYW55dGhpbmcuXG4gKi9cbmNvbnN0IEVycm9yVXRpbHMgPSB7XG4gIHNldEdsb2JhbEhhbmRsZXIoZnVuOiBFcnJvckhhbmRsZXIpOiB2b2lkIHtcbiAgICBfZ2xvYmFsSGFuZGxlciA9IGZ1bjtcbiAgfSxcbiAgZ2V0R2xvYmFsSGFuZGxlcigpOiBFcnJvckhhbmRsZXIge1xuICAgIHJldHVybiBfZ2xvYmFsSGFuZGxlcjtcbiAgfSxcbiAgcmVwb3J0RXJyb3IoZXJyb3I6IG1peGVkKTogdm9pZCB7XG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IsIGZhbHNlKTtcbiAgfSxcbiAgcmVwb3J0RmF0YWxFcnJvcihlcnJvcjogbWl4ZWQpOiB2b2lkIHtcbiAgICAvLyBOT1RFOiBUaGlzIGhhcyBhbiB1bnR5cGVkIGNhbGwgc2l0ZSBpbiBNZXRyby5cbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvciwgdHJ1ZSk7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkPFRBcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sIFRPdXQ+KFxuICAgIGZ1bjogRm48VEFyZ3MsIFRPdXQ+LFxuICAgIGNvbnRleHQ/OiA/bWl4ZWQsXG4gICAgYXJncz86ID9UQXJncyxcbiAgICAvLyBVbnVzZWQsIGJ1dCBzb21lIGNvZGUgc3luY2VkIGZyb20gd3d3IHNldHMgaXQgdG8gbnVsbC5cbiAgICB1bnVzZWRfb25FcnJvcj86IG51bGwsXG4gICAgLy8gU29tZSBjYWxsZXJzIHBhc3MgYSBuYW1lIGhlcmUsIHdoaWNoIHdlIGlnbm9yZS5cbiAgICB1bnVzZWRfbmFtZT86ID9zdHJpbmcsXG4gICk6ID9UT3V0IHtcbiAgICB0cnkge1xuICAgICAgX2luR3VhcmQrKztcbiAgICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdIDogVE9ETyBUNDgyMDQ3NDUgKDEpIGFwcGx5KGNvbnRleHQsXG4gICAgICAgKiBudWxsKSBpcyBmaW5lLiAoMikgYXJyYXkgLT4gcmVzdCBhcnJheSBzaG91bGQgd29yayAqL1xuICAgICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gOiBUT0RPIFQ0ODIwNDc0NSAoMSkgYXBwbHkoY29udGV4dCxcbiAgICAgICAqIG51bGwpIGlzIGZpbmUuICgyKSBhcnJheSAtPiByZXN0IGFycmF5IHNob3VsZCB3b3JrICovXG4gICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIEVycm9yVXRpbHMucmVwb3J0RXJyb3IoZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pbkd1YXJkLS07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBhcHBseVdpdGhHdWFyZElmTmVlZGVkPFRBcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sIFRPdXQ+KFxuICAgIGZ1bjogRm48VEFyZ3MsIFRPdXQ+LFxuICAgIGNvbnRleHQ/OiA/bWl4ZWQsXG4gICAgYXJncz86ID9UQXJncyxcbiAgKTogP1RPdXQge1xuICAgIGlmIChFcnJvclV0aWxzLmluR3VhcmQoKSkge1xuICAgICAgLyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF0gOiBUT0RPIFQ0ODIwNDc0NSAoMSkgYXBwbHkoY29udGV4dCxcbiAgICAgICAqIG51bGwpIGlzIGZpbmUuICgyKSBhcnJheSAtPiByZXN0IGFycmF5IHNob3VsZCB3b3JrICovXG4gICAgICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXSA6IFRPRE8gVDQ4MjA0NzQ1ICgxKSBhcHBseShjb250ZXh0LFxuICAgICAgICogbnVsbCkgaXMgZmluZS4gKDIpIGFycmF5IC0+IHJlc3QgYXJyYXkgc2hvdWxkIHdvcmsgKi9cbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoZnVuLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGluR3VhcmQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhX2luR3VhcmQ7XG4gIH0sXG4gIGd1YXJkPFRBcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sIFRPdXQ+KFxuICAgIGZ1bjogRm48VEFyZ3MsIFRPdXQ+LFxuICAgIG5hbWU/OiA/c3RyaW5nLFxuICAgIGNvbnRleHQ/OiA/bWl4ZWQsXG4gICk6ID8oLi4uVEFyZ3MpID0+ID9UT3V0IHtcbiAgICAvLyBUT0RPOiAobW90aSkgVDQ4MjA0NzUzIE1ha2Ugc3VyZSB0aGlzIHdhcm5pbmcgaXMgbmV2ZXIgaGl0IGFuZCByZW1vdmUgaXQgLSB0eXBlc1xuICAgIC8vIHNob3VsZCBiZSBzdWZmaWNpZW50LlxuICAgIGlmICh0eXBlb2YgZnVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0EgZnVuY3Rpb24gbXVzdCBiZSBwYXNzZWQgdG8gRXJyb3JVdGlscy5ndWFyZCwgZ290ICcsIGZ1bik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZ3VhcmROYW1lID0gbmFtZSA/PyBmdW4ubmFtZSA/PyAnPGdlbmVyYXRlZCBndWFyZD4nO1xuICAgIGZ1bmN0aW9uIGd1YXJkZWQoLi4uYXJnczogVEFyZ3MpOiA/VE91dCB7XG4gICAgICByZXR1cm4gRXJyb3JVdGlscy5hcHBseVdpdGhHdWFyZChcbiAgICAgICAgZnVuLFxuICAgICAgICBjb250ZXh0ID8/IHRoaXMsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGd1YXJkTmFtZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGd1YXJkZWQ7XG4gIH0sXG59O1xuXG5nbG9iYWwuRXJyb3JVdGlscyA9IEVycm9yVXRpbHM7XG5cbmV4cG9ydCB0eXBlIEVycm9yVXRpbHNUID0gdHlwZW9mIEVycm9yVXRpbHM7XG4iXX0=